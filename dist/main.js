/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/bouncing-square.js":
/*!********************************!*\
  !*** ./src/bouncing-square.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _square__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./square */ \"./src/square.js\");\n\n\nconst TOLERANCE = 0.1; // min speed until we round down to zero\nconst FRICTION = 0.75; // percentage of initial speed remaining after an impact, \n// < 1, speed is lost with each impact\n// = 1, no speed lost\n// > 1, speed is gained on each impact\nconst MAX_SPEED = 100; // pixels/second, used for calculating the color\nconst MIN_COLOR = [0, 0, 1, 1];\nconst MAX_COLOR = [1, 0, 0, 1];\n\nfunction generateColorFromSpeed(speed) {\n    let ratio = (speed / MAX_SPEED) ** 2;\n    if (ratio > 1) {\n        ratio = 1;\n    }\n    let color = [];\n    for (let i = 0; i < 3; i++) {\n        let diff = MAX_COLOR[i] - MIN_COLOR[i];\n        color.push(diff * ratio + MIN_COLOR[i]);\n    }\n    color.push(1); // alpha value\n\n    return color;\n}\n\nclass BouncingSquare extends _square__WEBPACK_IMPORTED_MODULE_0__.default {\n    /**\n     * \n     * @param {Number} x \n     * @param {Number} y \n     * @param {Number} xVelocity \n     * @param {Number} yVelocity \n     * @param {Number} xBounds \n     * @param {Number} yBounds \n     * @param {Number} dimension \n     * @param {[Number]} color \n     * @param {Number} depth Draw depth of the square\n     */\n    constructor(x, y, xVelocity, yVelocity, xBounds, yBounds, dimension, color, depth) {\n        super(x, y, xVelocity, yVelocity, xBounds, yBounds, dimension, color, depth);\n        this.x = x;\n        this.y = y;\n        this.xVelocity = xVelocity;\n        this.yVelocity = yVelocity;\n        this.xBounds = xBounds;\n        this.yBounds = yBounds;\n        this.dimension = dimension;\n        this.color = color;\n        this.depth = depth;\n    }\n\n    applyFriction() {\n        this.xVelocity *= FRICTION;\n        this.yVelocity *= FRICTION;\n        if (Math.abs(this.xVelocity) <= TOLERANCE) {\n            this.xVelocity = 0;\n        }\n        if (Math.abs(this.yVelocity) <= TOLERANCE) {\n            this.yVelocity = 0;\n        }\n        this.color = generateColorFromSpeed(Math.sqrt(this.xVelocity ** 2 + this.yVelocity ** 2));\n    }\n\n    update(deltaTime) {\n        if (this.x < 0) {\n            this.x = 0;\n            this.xVelocity = -this.xVelocity;\n            this.applyFriction();\n        }\n        if (this.x + this.dimension > this.xBounds) {\n            this.x = this.xBounds - this.dimension;\n            this.xVelocity = -this.xVelocity;\n            this.applyFriction();\n        }\n        if (this.y < 0) {\n            this.y = 0;\n            this.yVelocity = -this.yVelocity;\n            this.applyFriction();\n        }\n        if (this.y + this.dimension > this.yBounds) {\n            this.y = this.yBounds - this.dimension;\n            this.yVelocity = -this.yVelocity;\n            this.applyFriction();\n        }\n        _square__WEBPACK_IMPORTED_MODULE_0__.default.prototype.update.call(this, [deltaTime]);\n    }\n\n    /**\n     * \n     * @param {Number} xBound \n     * @param {Number} yBound \n     * @param {Number} dimension  Size of the square in pixels\n     * @param {Number} speed Speed of the square in pixels/second\n     */\n    static generateRandomSquare(xBound, yBound, dimension, speed, depth) {\n        let x = Math.random() * xBound;\n        let y = Math.random() * yBound;\n        let angle = Math.random() * Math.PI * 2;\n        let xVelocity = Math.cos(angle) * speed;\n        let yVelocity = Math.sin(angle) * speed;\n        let color = generateColorFromSpeed(speed);\n        return new BouncingSquare(x, y, xVelocity, yVelocity, xBound, yBound, dimension, color, depth);\n    }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (BouncingSquare);\n\n//# sourceURL=webpack://js-framework/./src/bouncing-square.js?");

/***/ }),

/***/ "./src/controllable-square.js":
/*!************************************!*\
  !*** ./src/controllable-square.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _square__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./square */ \"./src/square.js\");\n/* harmony import */ var _input_key_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./input/key-manager */ \"./src/input/key-manager.js\");\n\n\n\nclass ControllableSquare extends _square__WEBPACK_IMPORTED_MODULE_0__.default {\n    /**\n     * \n     * @param {*} x \n     * @param {*} y \n     * @param {*} xVelocity \n     * @param {*} yVelocity \n     * @param {*} xBounds \n     * @param {*} yBounds \n     * @param {*} dimension \n     * @param {*} color \n     * @param {*} depth \n     */\n    constructor(x, y, xVelocity, yVelocity, xBounds, yBounds, dimension, color, depth) {\n        super(x, y, 0, 0, xBounds, yBounds, dimension, color, depth);\n        this.currentVelocity = [0, 0];\n        let square = this;\n        (0,_input_key_manager__WEBPACK_IMPORTED_MODULE_1__.addKeyBind)('keydown', 'arrowleft', function() {\n            square.currentVelocity[0] = -xVelocity;\n        });\n        (0,_input_key_manager__WEBPACK_IMPORTED_MODULE_1__.addKeyBind)('keydown', 'arrowright', function() {\n            square.currentVelocity[0] = xVelocity;\n        });\n        (0,_input_key_manager__WEBPACK_IMPORTED_MODULE_1__.addKeyBind)('keyup', 'arrowright', function() {\n            square.currentVelocity[0] = 0;\n        });\n        (0,_input_key_manager__WEBPACK_IMPORTED_MODULE_1__.addKeyBind)('keyup', 'arrowleft', function() {\n            square.currentVelocity[0] = 0;\n        })\n    }\n\n    update(deltaTime) {\n        this.x += this.currentVelocity[0] * deltaTime;\n        this.y += this.currentVelocity[1] * deltaTime;\n        _square__WEBPACK_IMPORTED_MODULE_0__.default.prototype.update.call(this, [deltaTime]);\n    }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ControllableSquare);\n\n//# sourceURL=webpack://js-framework/./src/controllable-square.js?");

/***/ }),

/***/ "./src/game-object-manager.js":
/*!************************************!*\
  !*** ./src/game-object-manager.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getGameObjects\": () => (/* binding */ getGameObjects),\n/* harmony export */   \"removeGameObject\": () => (/* binding */ removeGameObject),\n/* harmony export */   \"addGameObject\": () => (/* binding */ addGameObject)\n/* harmony export */ });\n/* harmony import */ var _game_object__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./game-object */ \"./src/game-object.js\");\n\n\nconst gameObjectDictionary = {};\nlet gameObjects = [];\nlet nextID = 0;\nconst availableIDs = [];\n\n/**\n * Get all the current game objects\n * @returns {[GameObject]}  \n */\nfunction getGameObjects() {\n    gameObjects = [];\n    Object.keys(gameObjectDictionary).forEach(key => {\n        gameObjects.push(gameObjectDictionary[key]);\n    });\n    \n    return gameObjects;\n}\n/**\n * Delete this game object from the dictionary\n * @param {*} gameObject \n */\nfunction removeGameObject(gameObject) {\n    gameObjectDictionary.delete(gameObject.id);\n    availableIDs.push(gameObject.id);\n}\n\n/**\n * Creates a gameObject, assigns it an id and adds it to the gameObjectDictionary\n * @param {GameObject} gameObject \n */\nfunction addGameObject(gameObject) {\n    let id;\n    if (availableIDs.length === 0) {\n        id = nextID;\n        nextID += 1;\n    }\n    else {\n        id = availableIDs.pop();\n    }\n    gameObject.id = id;\n    gameObjectDictionary[gameObject.id] = gameObject;\n}\n\n\n\n//# sourceURL=webpack://js-framework/./src/game-object-manager.js?");

/***/ }),

/***/ "./src/game-object.js":
/*!****************************!*\
  !*** ./src/game-object.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass GameObject {\n    constructor() {\n        // id to be assigned when added to game object manager\n        this.id = NaN;\n    }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GameObject);\n\n//# sourceURL=webpack://js-framework/./src/game-object.js?");

/***/ }),

/***/ "./src/graphics/primitive-shapes.js":
/*!******************************************!*\
  !*** ./src/graphics/primitive-shapes.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"drawRectangle\": () => (/* binding */ drawRectangle),\n/* harmony export */   \"drawTriangle\": () => (/* binding */ drawTriangle),\n/* harmony export */   \"drawCircle\": () => (/* binding */ drawCircle)\n/* harmony export */ });\n/* harmony import */ var _webgl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./webgl-core */ \"./src/graphics/webgl-core.js\");\n// contains functions for drawing basic primitives using a simple GLSL program that takes only positions and colors\n\n/**\n * \n * @param {*} points \n * @param {*} color a color in RGBA format color \n */\nfunction applyColor(points, color) {\n    let result = [];\n    for (let i = 0; i < points.length; i+=2) {\n        result.push(...color);\n    }\n    return result;\n}\n\nfunction drawRectangle(leftX, bottomY, rightX, topY, color, depth = 0) {\n    let points = [\n        leftX, bottomY,\n        rightX, bottomY,\n        leftX, topY,\n        rightX, bottomY,\n        leftX, topY,\n        rightX, topY,\n    ];\n    let colors = applyColor(points, color);\n    (0,_webgl_core__WEBPACK_IMPORTED_MODULE_0__.addPrimitiveDrawingData)(points, colors, depth);\n}  \n\nfunction drawTriangle(points, color, depth = 0) {\n    (0,_webgl_core__WEBPACK_IMPORTED_MODULE_0__.addPrimitiveDrawingData)(points, applyColor(points, color), depth);\n}\n\nfunction drawCircle(centerX, centerY, radius, divisions, color, depth = 0) {\n    let points = [];\n    let dTheta = 2 * Math.PI / divisions;\n    let center = [centerX, centerY];\n    let prevX = centerX;\n    let prevY = centerY + radius;\n    for (let i = 0; i <= divisions; i++) {\n        points.push(...center);\n        points.push(...[prevX, prevY]);\n        prevX = centerX + radius * Math.cos(dTheta * (i + 1));\n        prevY = centerY + radius * Math.sin(dTheta * (i + 1));\n        points.push(...[prevX, prevY]);\n    }\n    let colors = applyColor(points, color);\n    (0,_webgl_core__WEBPACK_IMPORTED_MODULE_0__.addPrimitiveDrawingData)(points, colors, depth);\n}\n\n\n\n//# sourceURL=webpack://js-framework/./src/graphics/primitive-shapes.js?");

/***/ }),

/***/ "./src/graphics/webgl-core.js":
/*!************************************!*\
  !*** ./src/graphics/webgl-core.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"loadImageAndCreateTextureInfo\": () => (/* binding */ loadImageAndCreateTextureInfo),\n/* harmony export */   \"drawImages\": () => (/* binding */ drawImages),\n/* harmony export */   \"setContext\": () => (/* binding */ setContext),\n/* harmony export */   \"makeProgram\": () => (/* binding */ makeProgram),\n/* harmony export */   \"useProgramData\": () => (/* binding */ useProgramData),\n/* harmony export */   \"drawPrimitives\": () => (/* binding */ drawPrimitives),\n/* harmony export */   \"clear\": () => (/* binding */ clear),\n/* harmony export */   \"addPrimitiveDrawingData\": () => (/* binding */ addPrimitiveDrawingData)\n/* harmony export */ });\n/* harmony import */ var graphics_webgl_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphics/webgl-utils */ \"./src/graphics/webgl-utils.js\");\n/* harmony import */ var math_matrix_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! math/matrix-util */ \"./src/math/matrix-util.js\");\n\n\n;\n\n\n/** @type {WebGLRenderingContext} */\nlet gl;\nlet currentProgramData;\nconst primitiveDrawingData = {a_position: {}, a_color: {}, u_resolution: []};\nlet primitiveProgramData;\nlet imageProgramData;\nlet maxDepth = 0;\n\n/** \n * Setup the WebGL render context\n * @param {HTMLCanvasElement} canvas \n */\nfunction setContext(canvas) {\n    gl = canvas.getContext('webgl');\n    primitiveProgramData = makeProgram(document.querySelector('#pixel-vertex-shader-2d').textContent, document.querySelector('#color-fragment-shader-2d').textContent);\n    imageProgramData = makeProgram(document.querySelector('#image-vertex-shader-2d').textContent,  document.querySelector('#image-fragment-shader-2d').textContent);\n    if (!gl) {\n        alert('Error loading WebGL!');\n    }\n}\n\n/**\n * Compile a webGL program using the given shader sources. Requires WebGL render context to be set\n * @param {string} vertexSource \n * @param {string} shaderSource\n * @returns {WebGLProgram} \n */\nfunction makeProgram(vertexSource, shaderSource) {\n    if (!gl) {\n        alert('WebGL context must be initialized before calling makeProgram!');\n    }\n    return (0,graphics_webgl_utils__WEBPACK_IMPORTED_MODULE_0__.createProgramFromScripts)(gl, vertexSource, shaderSource);\n}\n\n/**\n * Set this to be the current active program data (object containing WebGL program and attribute/uniform info)\n * @param {*} programData \n */\nfunction useProgramData(programData) {\n    currentProgramData = programData;\n    gl.useProgram(currentProgramData.program); \n}\n\n/**\n * Clears the current canvas and sets the clear color\n * @param {Number[]} color Color in [r, g, b, a] format\n */\nfunction clear(color) {\n    gl.clearColor(...color);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n}\n\nfunction setupAttribBuffer(attribData, values, usage) {\n    /* for every attribute:\n    *  -get the attribute location from the program (using a string)\n    *  -create the buffer\n    *  -bind the buffer\n    *  -call bufferdata with the input\n    *  -call vertexAttribPointer with the necessary information\n    */\n    let buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(values), usage);\n    gl.enableVertexAttribArray(attribData.location);\n    gl.vertexAttribPointer(attribData.location, attribData.size, attribData.type, false, 0 , 0);\n}\n\nfunction setupUniform(uniformData, values) {\n    /* for uniforms:\n    *  -get the uniform location\n    *  -set the uniform\n    *  (both are handled by the provided setter function in uniformData)\n    */\n    uniformData.setter(values);\n}\n\n/**\n * Setup the attributes and uniforms for the currently loaded GLSL program\n * @param {*} values \n */\nfunction setupShaderVars(values) {\n    // iterate over each attribute, and extract the data from values\n    // presumes values has a field for each attribute name\n    Object.keys(currentProgramData.attributeData).forEach(attributeName => {\n        if (values[attributeName] === undefined) {\n            console.log(`Values not provided for attribute: ${attributeName}`);\n        }\n        else {\n            setupAttribBuffer(currentProgramData.attributeData[attributeName], values[attributeName], gl.DYNAMIC_DRAW);\n        }\n    });\n\n    Object.keys(currentProgramData.uniformData).forEach(uniformName => {\n        if (values[uniformName] === undefined) {\n            console.log(`Values not provided for uniform: ${uniformName}`);\n        }\n        else {\n            setupUniform(currentProgramData.uniformData[uniformName], values[uniformName]);\n        }\n    });\n}\n\n/**\n *  creates texture info { width w: height: h texture: tex}\n *  texture starts with 1x1 pixels and updates when it is loaded\n * @param {*} path Location of the image\n */\nfunction loadImageAndCreateTextureInfo(path) {\n    let tex = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, tex);\n    // fill text with 1x1 blue pixel\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE,\n        new Uint8Array([0, 0, 255, 255]));\n\n    // assume texture is not a power of 2\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\n    let textureInfo = {\n        width: 1, // size is unknown until load is done\n        height: 1,\n        texture: tex,\n    };\n    let img = new Image();\n    img.addEventListener('load', function() {\n        textureInfo.width = img.width;\n        textureInfo.height = img.height;\n        \n        gl.bindTexture(gl.TEXTURE_2D, textureInfo.texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img);\n        console.log(textureInfo);\n    });\n    \n    img.src = path;\n\n    return textureInfo;\n}\n\n/**\n * \n * @param {*} transforms \n */\nfunction createTransformMatrices(transforms) {\n    return transforms.map(t => {\n        let matrix = math_matrix_util__WEBPACK_IMPORTED_MODULE_1__.matrix3.identity();\n        matrix = math_matrix_util__WEBPACK_IMPORTED_MODULE_1__.matrix3.scale(matrix, t.sX, t.sY);\n        matrix = math_matrix_util__WEBPACK_IMPORTED_MODULE_1__.matrix3.rotate(matrix, t.angle);\n        matrix = math_matrix_util__WEBPACK_IMPORTED_MODULE_1__.matrix3.translate(matrix, t.tX, t.tY);\n        \n        return matrix;\n    });\n}\n\n\nfunction drawImages(positions, texCoords, texture, transformData) {\n    // TODO: right now, only binds a single texture to draw\n    // TODO: positions and texCoords are the same pairs right now- will want to use indexing to make this a bit faster, though we'll want to retain\n    // the ability to use different texCoords for when we use texture atlases\n    let matrices = createTransformMatrices(transformData);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    setupAttribBuffer(currentProgramData.attributeData['a_position'], positions, gl.DYNAMIC_DRAW);\n    setupAttribBuffer(currentProgramData.attributeData['a_texcoord'], texCoords, gl.DYNAMIC_DRAW);\n    setupAttribBuffer(currentProgramData.attributeData['a_matrix'], matrices, gl.DYNAMIC_DRAW);\n\n    setupUniform(currentProgramData.uniformData['u_resolution'], [canvas.width, canvas.height]);\n    let textureLocation = currentProgramData.uniformData['u_texture'].location;\n    gl.uniform1i(textureLocation, 0);\n\n    gl.drawArrays(gl.TRIANGLES, 0, positions.length / 2);\n}\n\nfunction drawImage(imageProgramData, positions, texcoords, tex, texWidth, texHeight, dstX, dstY, angle) {\n    useProgramData(imageProgramData);\n    gl.bindTexture(gl.TEXTURE_2D, tex);\n\n    // TODO: load in our shader program, or just remove the arg and set useProgramData from index.js\n    useProgramData(imageProgramData);\n\n    setupAttribBuffer(imageProgramData.attributeData['a_position'], positions, gl.DYNAMIC_DRAW);\n    setupAttribBuffer(imageProgramData.attributeData['a_texcoord'], texcoords, gl.DYNAMIC_DRAW);\n\n    setupUniform(imageProgramData.uniformData['u_resolution'], [canvas.width, canvas.height]);\n\n    // matrix will convert from pixels to clipspace\n    let matrix = math_matrix_util__WEBPACK_IMPORTED_MODULE_1__.matrix3.identity();\n\n    // this matrix scales our unit quad up to texWidth, texHeight\n    matrix = math_matrix_util__WEBPACK_IMPORTED_MODULE_1__.matrix3.scale(matrix, texWidth, texHeight);\n\n    // rotation transform would go here\n    matrix = math_matrix_util__WEBPACK_IMPORTED_MODULE_1__.matrix3.rotate(matrix, angle);\n\n    // this matrix will translate the quad to dstX, dstY\n    matrix = math_matrix_util__WEBPACK_IMPORTED_MODULE_1__.matrix3.translate(matrix, dstX, dstY);\n\n    let matrixLocation = imageProgramData.uniformData['u_matrix'].location;\n    // set the matrix uniform\n    gl.uniformMatrix3fv(matrixLocation, false, matrix);\n\n    let textureLocation = imageProgramData.uniformData['u_texture'].location;\n    // tell shader to get texture from texture unit 0\n    gl.uniform1i(textureLocation, 0);\n\n    // draw the quad (2 triangles, so 6 vertices)\n    gl.drawArrays(gl.TRIANGLES, 0 , 6);\n\n}\n\n/**\n * \n * @param {[Number]} points \n * @param {[Number]} colors \n * @param {Number} depth Draw order of this data, lower depth means it is drawn sooner, larger depth means it is drawn later\n */\nfunction addPrimitiveDrawingData(points, colors, depth = 0) {\n    if (primitiveDrawingData.a_position[depth] === undefined) {\n        if (depth > maxDepth) {\n            maxDepth = depth;\n        }\n        primitiveDrawingData.a_position[depth] = [];\n        primitiveDrawingData.a_color[depth] = [];\n    }\n    primitiveDrawingData.a_position[depth].push(...points);\n    primitiveDrawingData.a_color[depth].push(...colors);\n}\n\n/**\n * Take all drawing data and unfold it based on depth (e.g. depth = 0 is drawn before depth = 1, etc..) so we can bind it with webgl later\n */\nfunction generatePrimitiveDrawingData() {\n    let depth = 0;\n    let positions = [];\n    let colors = [];\n    while (depth <= maxDepth) {\n        if (primitiveDrawingData.a_position[depth] === undefined) {\n            depth += 1;\n            continue;\n        }\n        positions.push(...primitiveDrawingData.a_position[depth]);\n        colors.push(...primitiveDrawingData.a_color[depth]);\n        depth += 1;\n    }\n    primitiveDrawingData.a_position = positions;\n    primitiveDrawingData.a_color = colors;\n}\n\n/**\n * Draw primitives (i.e. rectangles) using the values supplied in primitiveDrawingData\n */\nfunction drawPrimitives() {\n    generatePrimitiveDrawingData();\n    primitiveDrawingData.u_resolution = [gl.canvas.width, gl.canvas.height];\n    useProgramData(primitiveProgramData);\n    setupShaderVars(primitiveDrawingData);\n    \n    (0,graphics_webgl_utils__WEBPACK_IMPORTED_MODULE_0__.resizeCanvasToDisplaySize)(gl.canvas);\n\n    // setup clip space to screen space relationship\n    // map -1, +1 to 0, width, ... etc\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n\n    let primitiveType = gl.TRIANGLES; // every 3 times the shader is run, a triangle will be drawn with the 3 points\n    let offset = 0;\n    let count = primitiveDrawingData.a_position.length / 2; // execute the vertex shader once for every pair of points provided\n    gl.drawArrays(primitiveType, offset, count);\n    Object.keys(primitiveDrawingData).forEach(key => {\n        primitiveDrawingData[key] = {};\n    })\n    maxDepth = 0;\n}\n\n\n\n//# sourceURL=webpack://js-framework/./src/graphics/webgl-core.js?");

/***/ }),

/***/ "./src/graphics/webgl-utils.js":
/*!*************************************!*\
  !*** ./src/graphics/webgl-utils.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createProgramFromScripts\": () => (/* binding */ createProgramFromScripts),\n/* harmony export */   \"resizeCanvasToDisplaySize\": () => (/* binding */ resizeCanvasToDisplaySize)\n/* harmony export */ });\n\n\n/**\n * Compile shader from source\n * @param {WebGLRenderingContext} gl \n * @param {WebGLRenderingContextBase} type \n * @param {string} source \n * @returns {WebGLShader}\n */\nfunction createShader(gl, type, source) {\n    let shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    let success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n    if (success) {\n        return shader;\n    }\n\n    console.log(gl.getShaderInfoLog(shader));\n    gl.deleteShader(shader);\n}\n\n/**\n * Extract all attribute and uniforms in this program, and record their locations\n * @param {WebGLRenderingContext} gl \n * @param {WebGLProgram} program \n * @param {WebGLShader} vertexShaderProgram \n * @param {WebGLShader} fragmentShaderProgram \n */\nfunction extractProgramData(gl, program, vertexShaderProgram, fragmentShaderProgram) {\n    /**\n     * Process a line of GLSL code into a attribute/uniform data object\n     * @param {string} line GLSL Code to be processed\n     * @param {*} container Container to place attribute (either attributeData or uniformData)\n     * @param {boolean} isAttribute True if attribute, False if uniform\n     */\n    function processLine(line, container, isAttribute) {\n        /**\n         * Get the associated WebGL type to be used for buffers later\n         * @param {string} type \n         */\n        function getGLType(type) {\n            //TODO: add in more types\n            const glTypes = {\n                ivec: gl.SHORT,\n                uvec: gl.UNSIGNED_INT,\n                vec: gl.FLOAT,\n            };\n            return glTypes[type];\n        }\n        function getUniformSetter(fullDataType) {\n            //TODO: add in more function mappings\n            const createSetter = function(glFunc) {\n                return (values) => gl[glFunc](location, ...values);\n            }\n            const setters = {\n                vec2: createSetter('uniform2f'),\n                vec3: createSetter('uniform3f'),\n                vec4: createSetter('uniform4f'),\n            }\n            return setters[fullDataType];\n        }\n        let splitLine = line.split(' ');\n        let name = splitLine[2].split(';')[0];\n        //TODO: make type line up with proper enum; e.g. gl.FLOAT for vec, gl.DOUBLE for dmat, dvec,... etc.\n        let fullDataType = splitLine[1];\n        // regex for getting non-numeric portion\n        let dataType = fullDataType.match(/\\D/g).join('')\n        let type = getGLType(dataType);\n        // regex for getting numerics only\n        let size = Number.parseInt(fullDataType.match(/\\d+/g).join(''));\n        let location = isAttribute ? gl.getAttribLocation(program, name) : gl.getUniformLocation(program, name);\n        if (isAttribute) {\n            container[name] = {type, size, location};\n        }\n        else {\n            container[name] = {type, size, location, setter: getUniformSetter(fullDataType)}\n        }\n        \n    }\n    let vertexRaw = gl.getShaderSource(vertexShaderProgram).split('\\n').map(x => x.trimStart());\n    let fragmentRaw = gl.getShaderSource(fragmentShaderProgram).split('\\n').map(x => x.trimStart());\n    let attributeData = {};\n    let uniformData = {};\n\n    vertexRaw.forEach(line => {\n        if (line.includes('uniform')) {\n            processLine(line, uniformData, false);\n        }\n        if (line.includes('attribute')) {\n            processLine(line, attributeData, true);\n        }\n    });\n    fragmentRaw.forEach(line => {\n        if (line.includes('uniform')) {\n            // I'm assuming the GLSL compiler checks to make sure that uniforms are named properly so there's no duplicates with different types\n            processLine(line, uniformData, false);\n        }\n    });\n    return {program, attributeData, uniformData};\n}\n\n/** \n * Create a webGL program \n * @param {WebGLRenderingContext} gl \n * @param {WebGLShader} vertexShader \n * @param {WebGLShader} fragmentShader \n * @returns {WebGLProgram}\n */\nfunction createProgram(gl, vertexShader, fragmentShader) {\n    let program = gl.createProgram();\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    let success = gl.getProgramParameter(program, gl.LINK_STATUS);\n    if (success) {\n        return extractProgramData(gl, program, vertexShader, fragmentShader);\n    }\n\n    console.log(gl.getProgramInfoLog(program));\n    gl.deleteProgram(program);\n}\n\n/**\n * Compiles GLSL program given the source code for vertex and fragment shaders\n * @param {WebGLRenderingContext} gl \n * @param {string} vertexSource \n * @param {string} fragmentSource \n */\nfunction createProgramFromScripts(gl, vertexSource, fragmentSource) {\n    const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexSource);\n    const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentSource);\n    return createProgram(gl, vertexShader, fragmentShader);\n}\n\n/**\n * Resize the canvas if it is not the same size in pixels\n * @param {HTMLCanvasElement} canvas \n */\nfunction resizeCanvasToDisplaySize(canvas) {\n    // Lookup the size the browser is displaying the canvas in CSS pixels.\n    const displayWidth  = canvas.clientWidth;\n    const displayHeight = canvas.clientHeight;\n   \n    // Check if the canvas is not the same size.\n    const needResize = canvas.width  !== displayWidth ||\n                       canvas.height !== displayHeight;\n   \n    if (needResize) {\n      // Make the canvas the same size\n      canvas.width  = displayWidth;\n      canvas.height = displayHeight;\n    }\n   \n    return needResize;\n}\n\n\n\n//# sourceURL=webpack://js-framework/./src/graphics/webgl-utils.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _bouncing_square__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bouncing-square */ \"./src/bouncing-square.js\");\n/* harmony import */ var _controllable_square__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./controllable-square */ \"./src/controllable-square.js\");\n/* harmony import */ var graphics_webgl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! graphics/webgl-core */ \"./src/graphics/webgl-core.js\");\n/* harmony import */ var _game_object_manager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./game-object-manager */ \"./src/game-object-manager.js\");\n/* harmony import */ var input_key_manager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! input/key-manager */ \"./src/input/key-manager.js\");\n\n;\n\n\n\n\n\nconst canvas = document.querySelector('#canvas');\nconst width = canvas.width;\nconst height = canvas.height;\n\nfunction webGLSetup() {\n    (0,graphics_webgl_core__WEBPACK_IMPORTED_MODULE_2__.setContext)(canvas);\n}\n\nlet timeStamp = Date.now();\n\n/**\n * Perform game logic\n */\nfunction update() {\n    let now = Date.now();\n    // convert to milliseconds\n    let deltaTime = (now - timeStamp) / 1000;\n    (0,_game_object_manager__WEBPACK_IMPORTED_MODULE_3__.getGameObjects)().forEach(obj => {\n        obj.update(deltaTime);\n    });\n    timeStamp = now;\n}\n\n/**\n * Perform rendering\n */\nfunction render() {\n    (0,graphics_webgl_core__WEBPACK_IMPORTED_MODULE_2__.drawPrimitives)();\n}\n\n/**\n * Main game loop\n */\nfunction loop() {\n    update();\n    render();\n    window.requestAnimationFrame(loop);\n}\n\nfunction start() {\n    webGLSetup();\n    for (let i = 0; i < 50; i++) {\n        const speed = (Math.random() * 80) + 20;\n        let newSquare = _bouncing_square__WEBPACK_IMPORTED_MODULE_0__.default.generateRandomSquare(width, height, 10, speed, 2);\n        (0,_game_object_manager__WEBPACK_IMPORTED_MODULE_3__.addGameObject)(newSquare);\n    }\n    let controllable = new _controllable_square__WEBPACK_IMPORTED_MODULE_1__.default(0, 0, 25, 25, width, height, 100, [1, 0, 1, 1], 0);\n    (0,_game_object_manager__WEBPACK_IMPORTED_MODULE_3__.addGameObject)(controllable);\n    loop();\n}\n\nstart();\n\n\n//# sourceURL=webpack://js-framework/./src/index.js?");

/***/ }),

/***/ "./src/input/key-manager.js":
/*!**********************************!*\
  !*** ./src/input/key-manager.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"clearAllKeyBinds\": () => (/* binding */ clearAllKeyBinds),\n/* harmony export */   \"clearKeyBind\": () => (/* binding */ clearKeyBind),\n/* harmony export */   \"addKeyBind\": () => (/* binding */ addKeyBind),\n/* harmony export */   \"replaceKeyBind\": () => (/* binding */ replaceKeyBind)\n/* harmony export */ });\n/* harmony import */ var input_keybinds__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! input/keybinds */ \"./src/input/keybinds.js\");\n\n\nconst keyBinds = {};\nkeyBinds['keydown'] = new input_keybinds__WEBPACK_IMPORTED_MODULE_0__.default();\nkeyBinds['keyup'] = new input_keybinds__WEBPACK_IMPORTED_MODULE_0__.default();\n\n/**\n * Add a key bind, performing this action in addition to any other actions that might be happening for this key\n * @param {string} type \n * @param {string} key \n * @param {function} action\n */\nfunction addKeyBind(type, key, action) {\n    keyBinds[type].addKeyBind(key, action);\n}\n\n/**\n * Add a key bind, replacing any action previously bound to this key\n * @param {string} type \n * @param {string} key \n * @param {function} action \n */\nfunction replaceKeyBind(type, key, action) {\n    keyBinds[type].replaceKeyBind(key, action);\n}\n\n/**\n * Remove the action associated with this key\n * @param {string} type \n * @param {string} key \n */\nfunction clearKeyBind(type, key) {\n    keyBinds[type].clearKeyBind(key);\n}\n\n/**\n * Clear all keybinds for this type\n * @param {string} type \n */\nfunction clearAllKeyBinds(type) {\n    keyBinds[type].clearAllKeyBinds();\n}\n\n/**\n * Listen for events from the window for all registered KeyBindContainers\n * @param {string} type \n */\nfunction listenForEvents(type) {\n    window.addEventListener(type, (e) => {\n        keyBinds[type].performKeyAction(e.key.toLowerCase());\n    });\n}\n\n\n// listen for events when this module is loaded\nObject.keys(keyBinds).forEach(type => {\n    listenForEvents(type);\n});\n\n\n\n\n//# sourceURL=webpack://js-framework/./src/input/key-manager.js?");

/***/ }),

/***/ "./src/input/keybinds.js":
/*!*******************************!*\
  !*** ./src/input/keybinds.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Create a composite function, which executes f1 then f2\n * @param {function} f1 \n * @param {function} f2 \n */\nfunction combineFunctions(f1, f2) {\n    return () => {\n        f1();\n        f2();\n    }\n}\n\nclass KeyBindContainer {\n    /**\n     * Clear ALL currently registered key actions\n     */\n    clearAllKeyBinds() {\n        Object.keys(this).forEach(key => {\n            delete this[key];\n        });\n    }\n\n    /**\n     * Clear the action associated with this key (if any)\n     * @param {string} key \n     */\n    clearKeyBind(key) {\n        delete this[key.toLowerCase];\n    }\n\n    performKeyAction(key) {\n        if (this[key] !== undefined) {\n            this[key]();\n        }\n    }\n\n    /**\n     * Register this action to this key. Will be combined with any actions that are already there, with the new action being performed after the first\n     * @param {string} key String of the key (will be matched to event.key)\n     * @param {function} action \n     */\n    addKeyBind(key, action) {\n        let lowercaseKey = key.toLowerCase();\n        if (this[lowercaseKey] === undefined) {\n            this[lowercaseKey] = action;\n        }\n        else {\n            this[lowercaseKey] = combineFunctions(this[lowercaseKey], action);\n        }\n    }\n\n    /**\n     * Register this action to this key, replacing any previous action\n     * @param {string} key \n     * @param {function} action \n     */\n    replaceKeyBind(key, action) {\n        let lowercaseKey = key.toLowerCase();\n        delete this[lowercaseKey];\n        this[lowercaseKey] = action;\n    }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (KeyBindContainer);\n\n//# sourceURL=webpack://js-framework/./src/input/keybinds.js?");

/***/ }),

/***/ "./src/math/matrix-util.js":
/*!*********************************!*\
  !*** ./src/math/matrix-util.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"matrix4\": () => (/* binding */ matrix4),\n/* harmony export */   \"matrix3\": () => (/* binding */ matrix3)\n/* harmony export */ });\n\nconst M00 = 0;\nconst M01 = 1;\nconst M02 = 2;\nconst M03 = 3;\nconst M10 = 4;\nconst M11 = 5;\nconst M12 = 6;\nconst M13 = 7;\nconst M20 = 8;\nconst M21 = 9;\nconst M22 = 10;\nconst M23 = 11;\nconst M30 = 12;\nconst M31 = 13;\nconst M32 = 14;\nconst M33 = 15;\nconst matrix4 = {\n    orthographic,\n    translate,\n    scale,\n    multiply,\n    prettyPrint,\n    identity: function matrix4Identity() {\n        return [\n            1, 0, 0, 0,\n            0, 1, 0, 0,\n            0, 0, 1, 0,\n            0, 0, 0, 1,\n        ];\n    },\n};\n\nfunction matrix2Identity() {\n    return [\n        1, 0,\n        0, 1,\n    ];\n}\n\nfunction matrix3Identity() {\n    return [\n        1, 0, 0,\n        0, 1, 0,\n        0, 0, 1,\n    ];\n}\n\nfunction orthographic(left, right, bottom, top, near, far) {\n    let matrix = [\n        0, 0, 0, 0,\n        0, 0, 0, 0,\n        0, 0, 0, 0,\n        0, 0, 0, 0,\n    ];\n    matrix[M00] = 2/(right-left);\n    matrix[M03] = -(right+left)/(right-left);\n    matrix[M11] = 2/(top-bottom);\n    matrix[M13] = -(top+bottom)/(top-bottom);\n    matrix[M22] = -2/(far-near);\n    matrix[M23] = -(far+near)/(far-near);\n    matrix[M33] = 1;\n\n    return matrix;\n}\n\nfunction translate(matrix, tx, ty, tz) {\n    let translationMatrix = [\n        1, 0, 0, 0,\n        0, 1, 0, 0,\n        0, 0, 1, 0,\n        tx, ty, tz, 1,\n    ];\n\n    return multiply(matrix, translationMatrix);\n}\n\nfunction scale(matrix, sx, sy, sz) {\n    let scaleMatrix = [\n        sx, 0,  0, 0,\n        0, sy,  0, 0,\n        0,  0, sz, 0,\n        0,  0,  0, 1,\n    ];\n\n    return multiply(matrix, scaleMatrix);\n}\n\nfunction multiply(matrix1, matrix2) {\n    function dotProduct(mat1Row, mat2Col) {\n        let product = 0;\n        for (let i = 0; i < 4; i++) {\n            product += (matrix1[i + mat1Row * 4] * matrix2[i * 4 + mat2Col]);\n        }\n        return product;\n    }\n    //assume matrix1 is always a 4x4, but matrix2 could be a 4x4 or a vec4\n    \n    if (matrix2.length === 16) {\n        let newMatrix = [\n            0, 0, 0, 0,\n            0, 0, 0, 0,\n            0, 0, 0, 0,\n            0, 0, 0, 0,\n        ];\n        // TODO: make this more succinct in a for loop?\n        newMatrix[0] = dotProduct(0, 0);\n        newMatrix[1] = dotProduct(0, 1);\n        newMatrix[2] = dotProduct(0, 2);\n        newMatrix[3] = dotProduct(0, 3);\n\n        newMatrix[4] = dotProduct(1, 0);\n        newMatrix[5] = dotProduct(1, 1);\n        newMatrix[6] = dotProduct(1, 2);\n        newMatrix[7] = dotProduct(1, 3);\n\n        newMatrix[8] = dotProduct(2, 0);\n        newMatrix[9] = dotProduct(2, 1);\n        newMatrix[10] = dotProduct(2, 2);\n        newMatrix[11] = dotProduct(2, 3);\n\n        newMatrix[12] = dotProduct(3, 0);\n        newMatrix[13] = dotProduct(3, 1);\n        newMatrix[14] = dotProduct(3, 2);\n        newMatrix[15] = dotProduct(3, 3);\n        return newMatrix;\n    }\n    else if (matrix2.length === 4) {\n        let newVector = [0, 0, 0, 0];\n        for (let index = 0; index < newVector.length; index += 1) {\n            let product = 0;\n            for (let i = 0; i < 4; i += 1) {\n                product += matrix1[i + 4*index] * matrix2[i];\n            }\n            newVector[index] = product;\n        }\n        return newVector\n    }\n    else {\n        console.log('Error! matrix4.multiply: second arg is not a 4x4 or a vec4!');\n        console.log(matrix2);\n    }\n}\n\nfunction prettyPrint(matrix) {\n    for (let i = 0; i < 4; i += 1) {\n        let str = '';\n        for (let j = 0; j < 4; j++) {\n            str += matrix[i*4 + j] + ' ';\n        }\n        console.log(str);\n    }\n}\n\nconst matrix3 = {\n    identity: function() {\n        return [\n            1, 0, 0,\n            0, 1, 0,\n            0, 0, 1,\n        ];\n    },\n    multiply: function(matrix1, matrix2) {\n        function dotProduct(mat1Row, mat2Col) {\n            let product = 0;\n            for (let i = 0; i < 3; i++) {\n                product += (matrix1[i + mat1Row * 3] * matrix2[i * 3 + mat2Col]);\n            }\n            return product;\n        }\n        if (matrix2.length === 9) {\n            let newMatrix = [\n                0, 0, 0,\n                0, 0, 0,\n                0, 0, 0,\n            ];\n            newMatrix[0] = dotProduct(0, 0);\n            newMatrix[1] = dotProduct(0, 1);\n            newMatrix[2] = dotProduct(0, 2);\n\n            newMatrix[3] = dotProduct(1, 0);\n            newMatrix[4] = dotProduct(1, 1);\n            newMatrix[5] = dotProduct(1, 2);\n\n            newMatrix[6] = dotProduct(2, 0);\n            newMatrix[7] = dotProduct(2, 1);\n            newMatrix[8] = dotProduct(2, 2);\n\n            return newMatrix;\n        } else if (matrix2.length === 3) {\n            let newVector = [0, 0, 0];\n            for (let index = 0; index < newVector.length; index += 1) {\n                let product = 0;\n                for (let i = 0; i < 3; i += 1) {\n                    product += matrix1[i + 3 * index] * matrix2[i];\n                }\n                newVector[index] = product;\n            }\n            return newVector;\n        } else {\n            console.log('Error- matrix3.multiply- second arg is neither a 3x3 or a vec3!');\n        }\n    },\n    scale: function(matrix, sx, sy) {\n        let scaleMatrix = [\n            sx, 0, 0,\n            0, sy, 0,\n            0, 0, 1,\n        ];\n        return matrix3.multiply(matrix, scaleMatrix);\n    },\n    translate: function(matrix, tx, ty) {\n        let translationMatrix = [\n            1, 0, 0,\n            0, 1, 0,\n            tx, ty, 1,\n        ];\n        return matrix3.multiply(matrix, translationMatrix);\n    },\n    rotate: function(matrix, angleInRadians) {\n        const cos = Math.cos(angleInRadians);\n        const sin = Math.sin(angleInRadians);\n        let rotationMatrix = [\n            cos, -sin, 0,\n            sin, cos, 0,\n            0, 0, 1,\n        ];\n        return matrix3.multiply(matrix, rotationMatrix);\n    },\n};\n\n\n\n//# sourceURL=webpack://js-framework/./src/math/matrix-util.js?");

/***/ }),

/***/ "./src/square.js":
/*!***********************!*\
  !*** ./src/square.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _game_object__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./game-object */ \"./src/game-object.js\");\n/* harmony import */ var _graphics_primitive_shapes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./graphics/primitive-shapes */ \"./src/graphics/primitive-shapes.js\");\n\n\n\n// simple square that can be rendered, and have velocity applied to it\nclass Square extends _game_object__WEBPACK_IMPORTED_MODULE_0__.default {\n    /**\n     * \n     * @param {Number} x \n     * @param {Number} y \n     * @param {Number} xVelocity \n     * @param {Number} yVelocity \n     * @param {Number} xBounds \n     * @param {Number} yBounds \n     * @param {Number} dimension \n     * @param {[Number]} color \n     * @param {Number} depth Draw depth of the square\n     */\n    constructor(x, y, xVelocity, yVelocity, xBounds, yBounds, dimension, color, depth) {\n        super();\n        this.x = x;\n        this.y = y;\n        this.xVelocity = xVelocity;\n        this.yVelocity = yVelocity;\n        this.xBounds = xBounds;\n        this.yBounds = yBounds;\n        this.dimension = dimension;\n        this.color = color;\n        this.depth = depth;\n    }\n\n    update(deltaTime) {\n        this.x += this.xVelocity * deltaTime;\n        this.y += this.yVelocity * deltaTime;\n        (0,_graphics_primitive_shapes__WEBPACK_IMPORTED_MODULE_1__.drawRectangle)(this.x, this.y, this.x + this.dimension, this.y + this.dimension, this.color, this.depth);\n    }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Square);\n\n//# sourceURL=webpack://js-framework/./src/square.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;